D. Пройти испытание DOM-деревом (40 баллов)
Кузнец принял у вас чертежи, выковал якорь, и только вы взошли на корабль, как уже ступаете на берег в неизвестной вам стороне. За вами грозно шумит море, а впереди возвышается гора, где в пещере Алхимик наполняет бесчисленные склянки волшебными эликсирами. Вы преодолеваете расстояние и оказываетесь на пороге пещеры. Наконец-то вы познакомитесь с Алхимиком и овладеете всеми знаниями! «Не тут-то было, — с усмешкой встречает вас мудрец, — по закону жанра, сначала тебе нужно пройти испытание DOM-деревом. Видишь эти склянки? Разлей в них эликсиры бессмертия и любви, яд гадюки и слезы русалок, добавь жабьи струпья, ногти ведьмы, толченые зубы дракона и все, что ты видишь перед собой, в нужной последовательности. Посмотрим, сможешь ли ты постичь мое искусство». Докажите Алхимику, что для вас нет ничего невозможного.

Дан набор CSS правил и HTML дерево, требуется применить css и выдать итоговый html.

Требуется написать функцию, которая установит в свойство styles html-элементов финальные значения и вернет это дерево.

Далее описание функции и параметров дано на Typescript, но функцию требуется написать на JS.

module.exports = function(html: HtmlNode, css: Array<CssRule>): HtmlNode {
    
}
Формат данных
export type TextNode = {
    type: 'TEXT';
    text: string;
}

export type ElementNode = {
    type: 'ELEMENT'
    styles: Record<string, string>;
    tag: string;
    children: Array<ElementNode | TextNode>;
}

export type HtmlNode = ElementNode | TextNode;

export type CssRule = {
  selector: string;
  declarations: Record<string, string>;
}
Ограничения:
селекторы содержат только теги
максимальное количество тегов в одном селекторе — два (если есть комбинатор)
селекторы, содержащие только один тег, идут раньше других селекторов, т.е. сначала будут идти правила вида tag1 и tag2, а уже потом tag1 tag2
есть следующие комбинаторы, с правилами как в CSS:
tag1 tag2
tag1 > tag2
tag1 + tag2
tag1 ~ tag2
CSS содержит правила только на наследуемые свойства, такие как color, font-size и т.д.
для корневого элемента HTML в стилях заданы все возможные свойства потомков. Т.е. если какой-либо из потомков задает цвет, то для корневого элемента цвет будет тоже задан
цвета будут заданы в формате rgb(0, 255, 0)
в CSS не будет сокращенных свойств, таких как background, font
правила не содержат такие значения как inherit, unset и т.д.
Входные данные
Пусть HTML и CSS имели следующий вид:

<html>
<head>
  <style>
    parent {
      color: rgb(0, 255, 0);
    }
  
    tag {
      color: rgb(0, 255, 0);
    }
  </style>
</head>
<body>
  <parent>
    <tag>text</tag>
  </parent>
</body>
</html>
Тогда функция-решение будет вызвана со следующими параметрами:

const html = {
  "type": "ELEMENT",
  "tag": "parent",
  "styles": {},
  "children": [
    {
      "type": "TEXT",
      "text": "\n    "
    },
    {
      "type": "ELEMENT",
      "tag": "tag",
      "styles": {},
      "children": [
        {
          "type": "TEXT",
          "text": "text"
        }
      ]
    },
    {
      "type": "TEXT",
      "text": "\n"
    }
  ]
};

const css = [
  {
    "selector": "parent",
    "declarations": {
      "color": "rgb(0, 255, 0)"
    }
  },
  {
    "selector": "tag",
    "declarations": {
      "color": "rgb(0, 255, 0)"
    }
  }
];

const result = solution(html, css);
Для облегчения тестирования можно скачать архив user-tester (ссылка "Скачать условие задачи" ниже), со страничкой для тестирования решения.

Решение будет проверяться на Node 12.

Скачать условие задачи